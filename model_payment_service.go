/*
Gr4vy API

Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.

API version: 1.1.0-beta
Contact: code@gr4vy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PaymentService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentService{}

// PaymentService An active, configured payment service.
type PaymentService struct {
	// The type of this resource.
	Type *string `json:"type,omitempty"`
	// The ID of this payment service.
	Id *string `json:"id,omitempty"`
	// A list of countries for which this service is enabled, in ISO two-letter code format.
	AcceptedCountries []string `json:"accepted_countries,omitempty"`
	// A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
	AcceptedCurrencies []string `json:"accepted_currencies,omitempty"`
	// Defines if this service is currently active or not.
	Active *bool `json:"active,omitempty"`
	// The date and time when this service was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The custom name set for this service.
	DisplayName *string `json:"display_name,omitempty"`
	// A list of fields, each containing a key-value pair for each field configured for this payment service. Fields marked as `secret` (see Payment Service Definition) are not returned.
	Fields []GiftCardServiceFieldsInner `json:"fields,omitempty"`
	// A list of fields, each containing a key-value pair for each field configured for reporting for this payment service. Fields marked as `secret` (see Payment Service Definition) are not returned.
	ReportingFields []PaymentServiceReportingFieldsInner `json:"reporting_fields,omitempty"`
	// The unique ID for a merchant account.
	MerchantAccountId *string `json:"merchant_account_id,omitempty"`
	// An object containing a key for each supported card scheme (Amex, Discover, Mastercard and Visa), and for each key an object with the merchant profile for this service and the corresponding scheme.
	MerchantProfile NullableMerchantProfileSummary `json:"merchant_profile,omitempty"`
	// The payment method that this service handles.
	Method *string `json:"method,omitempty"`
	// Defines if network tokens are enabled for the service. This feature can only be enabled if the payment service is set as `open_loop` and the PSP is set up to accept network tokens.
	NetworkTokensEnabled *bool `json:"network_tokens_enabled,omitempty"`
	// Defines if the service works as an open-loop service. This feature can only be enabled if the PSP is set up to accept previous scheme transaction IDs.
	OpenLoop *bool `json:"open_loop,omitempty"`
	// Defines if tokenization is enabled for the service. This feature can only be enabled if the payment service is NOT set as `open_loop` and the PSP is set up to tokenize.
	PaymentMethodTokenizationEnabled *bool `json:"payment_method_tokenization_enabled,omitempty"`
	// The ID of the payment service definition used to create this service. 
	PaymentServiceDefinitionId *string `json:"payment_service_definition_id,omitempty"`
	// Defines if settlement reporting is enabled for the service. This feature can only be enabled if the payment service definition supports the `settlement_reporting` feature.
	SettlementReportingEnabled *bool `json:"settlement_reporting_enabled,omitempty"`
	// The current status of this service. This will start off as pending, move to created, and might eventually move to an error status if and when the credentials are no longer valid. 
	Status *string `json:"status,omitempty"`
	// Defines if 3-D Secure is enabled for the service. This feature can only be enabled if the payment service definition supports the `three_d_secure_hosted` feature. This does not affect pass through 3-D Secure data.
	ThreeDSecureEnabled *bool `json:"three_d_secure_enabled,omitempty"`
	// The date and time when this service was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The URL that needs to be configured with this payment service as the receiving endpoint for webhooks from the service to Gr4vy. Currently, Gr4vy does not yet automatically register webhooks on setup, and therefore webhooks need to be registered manually by the merchant.
	WebhookUrl NullableString `json:"webhook_url,omitempty"`
}

// NewPaymentService instantiates a new PaymentService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentService() *PaymentService {
	this := PaymentService{}
	var active bool = true
	this.Active = &active
	var paymentMethodTokenizationEnabled bool = false
	this.PaymentMethodTokenizationEnabled = &paymentMethodTokenizationEnabled
	var threeDSecureEnabled bool = false
	this.ThreeDSecureEnabled = &threeDSecureEnabled
	return &this
}

// NewPaymentServiceWithDefaults instantiates a new PaymentService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentServiceWithDefaults() *PaymentService {
	this := PaymentService{}
	var active bool = true
	this.Active = &active
	var paymentMethodTokenizationEnabled bool = false
	this.PaymentMethodTokenizationEnabled = &paymentMethodTokenizationEnabled
	var threeDSecureEnabled bool = false
	this.ThreeDSecureEnabled = &threeDSecureEnabled
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PaymentService) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PaymentService) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PaymentService) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PaymentService) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PaymentService) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PaymentService) SetId(v string) {
	o.Id = &v
}

// GetAcceptedCountries returns the AcceptedCountries field value if set, zero value otherwise.
func (o *PaymentService) GetAcceptedCountries() []string {
	if o == nil || IsNil(o.AcceptedCountries) {
		var ret []string
		return ret
	}
	return o.AcceptedCountries
}

// GetAcceptedCountriesOk returns a tuple with the AcceptedCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetAcceptedCountriesOk() ([]string, bool) {
	if o == nil || IsNil(o.AcceptedCountries) {
		return nil, false
	}
	return o.AcceptedCountries, true
}

// HasAcceptedCountries returns a boolean if a field has been set.
func (o *PaymentService) HasAcceptedCountries() bool {
	if o != nil && !IsNil(o.AcceptedCountries) {
		return true
	}

	return false
}

// SetAcceptedCountries gets a reference to the given []string and assigns it to the AcceptedCountries field.
func (o *PaymentService) SetAcceptedCountries(v []string) {
	o.AcceptedCountries = v
}

// GetAcceptedCurrencies returns the AcceptedCurrencies field value if set, zero value otherwise.
func (o *PaymentService) GetAcceptedCurrencies() []string {
	if o == nil || IsNil(o.AcceptedCurrencies) {
		var ret []string
		return ret
	}
	return o.AcceptedCurrencies
}

// GetAcceptedCurrenciesOk returns a tuple with the AcceptedCurrencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetAcceptedCurrenciesOk() ([]string, bool) {
	if o == nil || IsNil(o.AcceptedCurrencies) {
		return nil, false
	}
	return o.AcceptedCurrencies, true
}

// HasAcceptedCurrencies returns a boolean if a field has been set.
func (o *PaymentService) HasAcceptedCurrencies() bool {
	if o != nil && !IsNil(o.AcceptedCurrencies) {
		return true
	}

	return false
}

// SetAcceptedCurrencies gets a reference to the given []string and assigns it to the AcceptedCurrencies field.
func (o *PaymentService) SetAcceptedCurrencies(v []string) {
	o.AcceptedCurrencies = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PaymentService) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PaymentService) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PaymentService) SetActive(v bool) {
	o.Active = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PaymentService) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PaymentService) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PaymentService) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *PaymentService) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *PaymentService) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *PaymentService) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *PaymentService) GetFields() []GiftCardServiceFieldsInner {
	if o == nil || IsNil(o.Fields) {
		var ret []GiftCardServiceFieldsInner
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetFieldsOk() ([]GiftCardServiceFieldsInner, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *PaymentService) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []GiftCardServiceFieldsInner and assigns it to the Fields field.
func (o *PaymentService) SetFields(v []GiftCardServiceFieldsInner) {
	o.Fields = v
}

// GetReportingFields returns the ReportingFields field value if set, zero value otherwise.
func (o *PaymentService) GetReportingFields() []PaymentServiceReportingFieldsInner {
	if o == nil || IsNil(o.ReportingFields) {
		var ret []PaymentServiceReportingFieldsInner
		return ret
	}
	return o.ReportingFields
}

// GetReportingFieldsOk returns a tuple with the ReportingFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetReportingFieldsOk() ([]PaymentServiceReportingFieldsInner, bool) {
	if o == nil || IsNil(o.ReportingFields) {
		return nil, false
	}
	return o.ReportingFields, true
}

// HasReportingFields returns a boolean if a field has been set.
func (o *PaymentService) HasReportingFields() bool {
	if o != nil && !IsNil(o.ReportingFields) {
		return true
	}

	return false
}

// SetReportingFields gets a reference to the given []PaymentServiceReportingFieldsInner and assigns it to the ReportingFields field.
func (o *PaymentService) SetReportingFields(v []PaymentServiceReportingFieldsInner) {
	o.ReportingFields = v
}

// GetMerchantAccountId returns the MerchantAccountId field value if set, zero value otherwise.
func (o *PaymentService) GetMerchantAccountId() string {
	if o == nil || IsNil(o.MerchantAccountId) {
		var ret string
		return ret
	}
	return *o.MerchantAccountId
}

// GetMerchantAccountIdOk returns a tuple with the MerchantAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetMerchantAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantAccountId) {
		return nil, false
	}
	return o.MerchantAccountId, true
}

// HasMerchantAccountId returns a boolean if a field has been set.
func (o *PaymentService) HasMerchantAccountId() bool {
	if o != nil && !IsNil(o.MerchantAccountId) {
		return true
	}

	return false
}

// SetMerchantAccountId gets a reference to the given string and assigns it to the MerchantAccountId field.
func (o *PaymentService) SetMerchantAccountId(v string) {
	o.MerchantAccountId = &v
}

// GetMerchantProfile returns the MerchantProfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentService) GetMerchantProfile() MerchantProfileSummary {
	if o == nil || IsNil(o.MerchantProfile.Get()) {
		var ret MerchantProfileSummary
		return ret
	}
	return *o.MerchantProfile.Get()
}

// GetMerchantProfileOk returns a tuple with the MerchantProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentService) GetMerchantProfileOk() (*MerchantProfileSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.MerchantProfile.Get(), o.MerchantProfile.IsSet()
}

// HasMerchantProfile returns a boolean if a field has been set.
func (o *PaymentService) HasMerchantProfile() bool {
	if o != nil && o.MerchantProfile.IsSet() {
		return true
	}

	return false
}

// SetMerchantProfile gets a reference to the given NullableMerchantProfileSummary and assigns it to the MerchantProfile field.
func (o *PaymentService) SetMerchantProfile(v MerchantProfileSummary) {
	o.MerchantProfile.Set(&v)
}
// SetMerchantProfileNil sets the value for MerchantProfile to be an explicit nil
func (o *PaymentService) SetMerchantProfileNil() {
	o.MerchantProfile.Set(nil)
}

// UnsetMerchantProfile ensures that no value is present for MerchantProfile, not even an explicit nil
func (o *PaymentService) UnsetMerchantProfile() {
	o.MerchantProfile.Unset()
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *PaymentService) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *PaymentService) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *PaymentService) SetMethod(v string) {
	o.Method = &v
}

// GetNetworkTokensEnabled returns the NetworkTokensEnabled field value if set, zero value otherwise.
func (o *PaymentService) GetNetworkTokensEnabled() bool {
	if o == nil || IsNil(o.NetworkTokensEnabled) {
		var ret bool
		return ret
	}
	return *o.NetworkTokensEnabled
}

// GetNetworkTokensEnabledOk returns a tuple with the NetworkTokensEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetNetworkTokensEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.NetworkTokensEnabled) {
		return nil, false
	}
	return o.NetworkTokensEnabled, true
}

// HasNetworkTokensEnabled returns a boolean if a field has been set.
func (o *PaymentService) HasNetworkTokensEnabled() bool {
	if o != nil && !IsNil(o.NetworkTokensEnabled) {
		return true
	}

	return false
}

// SetNetworkTokensEnabled gets a reference to the given bool and assigns it to the NetworkTokensEnabled field.
func (o *PaymentService) SetNetworkTokensEnabled(v bool) {
	o.NetworkTokensEnabled = &v
}

// GetOpenLoop returns the OpenLoop field value if set, zero value otherwise.
func (o *PaymentService) GetOpenLoop() bool {
	if o == nil || IsNil(o.OpenLoop) {
		var ret bool
		return ret
	}
	return *o.OpenLoop
}

// GetOpenLoopOk returns a tuple with the OpenLoop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetOpenLoopOk() (*bool, bool) {
	if o == nil || IsNil(o.OpenLoop) {
		return nil, false
	}
	return o.OpenLoop, true
}

// HasOpenLoop returns a boolean if a field has been set.
func (o *PaymentService) HasOpenLoop() bool {
	if o != nil && !IsNil(o.OpenLoop) {
		return true
	}

	return false
}

// SetOpenLoop gets a reference to the given bool and assigns it to the OpenLoop field.
func (o *PaymentService) SetOpenLoop(v bool) {
	o.OpenLoop = &v
}

// GetPaymentMethodTokenizationEnabled returns the PaymentMethodTokenizationEnabled field value if set, zero value otherwise.
func (o *PaymentService) GetPaymentMethodTokenizationEnabled() bool {
	if o == nil || IsNil(o.PaymentMethodTokenizationEnabled) {
		var ret bool
		return ret
	}
	return *o.PaymentMethodTokenizationEnabled
}

// GetPaymentMethodTokenizationEnabledOk returns a tuple with the PaymentMethodTokenizationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetPaymentMethodTokenizationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PaymentMethodTokenizationEnabled) {
		return nil, false
	}
	return o.PaymentMethodTokenizationEnabled, true
}

// HasPaymentMethodTokenizationEnabled returns a boolean if a field has been set.
func (o *PaymentService) HasPaymentMethodTokenizationEnabled() bool {
	if o != nil && !IsNil(o.PaymentMethodTokenizationEnabled) {
		return true
	}

	return false
}

// SetPaymentMethodTokenizationEnabled gets a reference to the given bool and assigns it to the PaymentMethodTokenizationEnabled field.
func (o *PaymentService) SetPaymentMethodTokenizationEnabled(v bool) {
	o.PaymentMethodTokenizationEnabled = &v
}

// GetPaymentServiceDefinitionId returns the PaymentServiceDefinitionId field value if set, zero value otherwise.
func (o *PaymentService) GetPaymentServiceDefinitionId() string {
	if o == nil || IsNil(o.PaymentServiceDefinitionId) {
		var ret string
		return ret
	}
	return *o.PaymentServiceDefinitionId
}

// GetPaymentServiceDefinitionIdOk returns a tuple with the PaymentServiceDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetPaymentServiceDefinitionIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentServiceDefinitionId) {
		return nil, false
	}
	return o.PaymentServiceDefinitionId, true
}

// HasPaymentServiceDefinitionId returns a boolean if a field has been set.
func (o *PaymentService) HasPaymentServiceDefinitionId() bool {
	if o != nil && !IsNil(o.PaymentServiceDefinitionId) {
		return true
	}

	return false
}

// SetPaymentServiceDefinitionId gets a reference to the given string and assigns it to the PaymentServiceDefinitionId field.
func (o *PaymentService) SetPaymentServiceDefinitionId(v string) {
	o.PaymentServiceDefinitionId = &v
}

// GetSettlementReportingEnabled returns the SettlementReportingEnabled field value if set, zero value otherwise.
func (o *PaymentService) GetSettlementReportingEnabled() bool {
	if o == nil || IsNil(o.SettlementReportingEnabled) {
		var ret bool
		return ret
	}
	return *o.SettlementReportingEnabled
}

// GetSettlementReportingEnabledOk returns a tuple with the SettlementReportingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetSettlementReportingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SettlementReportingEnabled) {
		return nil, false
	}
	return o.SettlementReportingEnabled, true
}

// HasSettlementReportingEnabled returns a boolean if a field has been set.
func (o *PaymentService) HasSettlementReportingEnabled() bool {
	if o != nil && !IsNil(o.SettlementReportingEnabled) {
		return true
	}

	return false
}

// SetSettlementReportingEnabled gets a reference to the given bool and assigns it to the SettlementReportingEnabled field.
func (o *PaymentService) SetSettlementReportingEnabled(v bool) {
	o.SettlementReportingEnabled = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PaymentService) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PaymentService) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PaymentService) SetStatus(v string) {
	o.Status = &v
}

// GetThreeDSecureEnabled returns the ThreeDSecureEnabled field value if set, zero value otherwise.
func (o *PaymentService) GetThreeDSecureEnabled() bool {
	if o == nil || IsNil(o.ThreeDSecureEnabled) {
		var ret bool
		return ret
	}
	return *o.ThreeDSecureEnabled
}

// GetThreeDSecureEnabledOk returns a tuple with the ThreeDSecureEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetThreeDSecureEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ThreeDSecureEnabled) {
		return nil, false
	}
	return o.ThreeDSecureEnabled, true
}

// HasThreeDSecureEnabled returns a boolean if a field has been set.
func (o *PaymentService) HasThreeDSecureEnabled() bool {
	if o != nil && !IsNil(o.ThreeDSecureEnabled) {
		return true
	}

	return false
}

// SetThreeDSecureEnabled gets a reference to the given bool and assigns it to the ThreeDSecureEnabled field.
func (o *PaymentService) SetThreeDSecureEnabled(v bool) {
	o.ThreeDSecureEnabled = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PaymentService) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentService) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PaymentService) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PaymentService) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetWebhookUrl returns the WebhookUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentService) GetWebhookUrl() string {
	if o == nil || IsNil(o.WebhookUrl.Get()) {
		var ret string
		return ret
	}
	return *o.WebhookUrl.Get()
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentService) GetWebhookUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookUrl.Get(), o.WebhookUrl.IsSet()
}

// HasWebhookUrl returns a boolean if a field has been set.
func (o *PaymentService) HasWebhookUrl() bool {
	if o != nil && o.WebhookUrl.IsSet() {
		return true
	}

	return false
}

// SetWebhookUrl gets a reference to the given NullableString and assigns it to the WebhookUrl field.
func (o *PaymentService) SetWebhookUrl(v string) {
	o.WebhookUrl.Set(&v)
}
// SetWebhookUrlNil sets the value for WebhookUrl to be an explicit nil
func (o *PaymentService) SetWebhookUrlNil() {
	o.WebhookUrl.Set(nil)
}

// UnsetWebhookUrl ensures that no value is present for WebhookUrl, not even an explicit nil
func (o *PaymentService) UnsetWebhookUrl() {
	o.WebhookUrl.Unset()
}

func (o PaymentService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.AcceptedCountries) {
		toSerialize["accepted_countries"] = o.AcceptedCountries
	}
	if !IsNil(o.AcceptedCurrencies) {
		toSerialize["accepted_currencies"] = o.AcceptedCurrencies
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.ReportingFields) {
		toSerialize["reporting_fields"] = o.ReportingFields
	}
	if !IsNil(o.MerchantAccountId) {
		toSerialize["merchant_account_id"] = o.MerchantAccountId
	}
	if o.MerchantProfile.IsSet() {
		toSerialize["merchant_profile"] = o.MerchantProfile.Get()
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.NetworkTokensEnabled) {
		toSerialize["network_tokens_enabled"] = o.NetworkTokensEnabled
	}
	if !IsNil(o.OpenLoop) {
		toSerialize["open_loop"] = o.OpenLoop
	}
	if !IsNil(o.PaymentMethodTokenizationEnabled) {
		toSerialize["payment_method_tokenization_enabled"] = o.PaymentMethodTokenizationEnabled
	}
	if !IsNil(o.PaymentServiceDefinitionId) {
		toSerialize["payment_service_definition_id"] = o.PaymentServiceDefinitionId
	}
	if !IsNil(o.SettlementReportingEnabled) {
		toSerialize["settlement_reporting_enabled"] = o.SettlementReportingEnabled
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ThreeDSecureEnabled) {
		toSerialize["three_d_secure_enabled"] = o.ThreeDSecureEnabled
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.WebhookUrl.IsSet() {
		toSerialize["webhook_url"] = o.WebhookUrl.Get()
	}
	return toSerialize, nil
}

type NullablePaymentService struct {
	value *PaymentService
	isSet bool
}

func (v NullablePaymentService) Get() *PaymentService {
	return v.value
}

func (v *NullablePaymentService) Set(val *PaymentService) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentService) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentService(val *PaymentService) *NullablePaymentService {
	return &NullablePaymentService{value: val, isSet: true}
}

func (v NullablePaymentService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


