/*
Gr4vy API

Testing BuyersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_BuyersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BuyersAPIService DeleteBuyer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var buyerId string

		httpRes, err := apiClient.BuyersAPI.DeleteBuyer(context.Background(), buyerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyersAPIService DeleteBuyerShippingDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var buyerId string
		var shippingDetailId string

		httpRes, err := apiClient.BuyersAPI.DeleteBuyerShippingDetail(context.Background(), buyerId, shippingDetailId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyersAPIService GetBuyer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var buyerId string

		resp, httpRes, err := apiClient.BuyersAPI.GetBuyer(context.Background(), buyerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyersAPIService ListBuyerShippingDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var buyerId string

		resp, httpRes, err := apiClient.BuyersAPI.ListBuyerShippingDetails(context.Background(), buyerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyersAPIService ListBuyers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BuyersAPI.ListBuyers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyersAPIService NewBuyer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BuyersAPI.NewBuyer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyersAPIService NewBuyerShippingDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var buyerId string

		resp, httpRes, err := apiClient.BuyersAPI.NewBuyerShippingDetail(context.Background(), buyerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyersAPIService UpdateBuyer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var buyerId string

		resp, httpRes, err := apiClient.BuyersAPI.UpdateBuyer(context.Background(), buyerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyersAPIService UpdateBuyerShippingDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var buyerId string
		var shippingDetailId string

		resp, httpRes, err := apiClient.BuyersAPI.UpdateBuyerShippingDetail(context.Background(), buyerId, shippingDetailId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
