/*
Gr4vy API

Testing CheckoutSessionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/FuturHealth/gr4vy-go-sdk"
)

func Test_openapi_CheckoutSessionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CheckoutSessionsAPIService DeleteCheckoutSession", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkoutSessionId string

		httpRes, err := apiClient.CheckoutSessionsAPI.DeleteCheckoutSession(context.Background(), checkoutSessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckoutSessionsAPIService GetCheckoutSession", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkoutSessionId string

		resp, httpRes, err := apiClient.CheckoutSessionsAPI.GetCheckoutSession(context.Background(), checkoutSessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckoutSessionsAPIService NewCheckoutSession", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CheckoutSessionsAPI.NewCheckoutSession(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckoutSessionsAPIService UpdateCheckoutSession", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkoutSessionId string

		resp, httpRes, err := apiClient.CheckoutSessionsAPI.UpdateCheckoutSession(context.Background(), checkoutSessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
