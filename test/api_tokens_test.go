/*
Gr4vy API

Testing TokensAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_TokensAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TokensAPIService DeleteNetworkToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var paymentMethodId string
		var networkTokenId string

		httpRes, err := apiClient.TokensAPI.DeleteNetworkToken(context.Background(), paymentMethodId, networkTokenId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensAPIService DeletePaymentServiceToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var paymentMethodId string
		var paymentServiceTokenId string

		httpRes, err := apiClient.TokensAPI.DeletePaymentServiceToken(context.Background(), paymentMethodId, paymentServiceTokenId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensAPIService GetNetworkTokens", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var paymentMethodId string

		resp, httpRes, err := apiClient.TokensAPI.GetNetworkTokens(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensAPIService GetPaymentServiceTokens", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var paymentMethodId string

		resp, httpRes, err := apiClient.TokensAPI.GetPaymentServiceTokens(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensAPIService IssueCryptogram", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var paymentMethodId string
		var networkTokenId string

		resp, httpRes, err := apiClient.TokensAPI.IssueCryptogram(context.Background(), paymentMethodId, networkTokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensAPIService ProvisionNetworkToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var paymentMethodId string

		resp, httpRes, err := apiClient.TokensAPI.ProvisionNetworkToken(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensAPIService ProvisionPaymentServiceToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var paymentMethodId string

		resp, httpRes, err := apiClient.TokensAPI.ProvisionPaymentServiceToken(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensAPIService ResumeNetworkToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var paymentMethodId string
		var networkTokenId string

		resp, httpRes, err := apiClient.TokensAPI.ResumeNetworkToken(context.Background(), paymentMethodId, networkTokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensAPIService SuspendNetworkToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var paymentMethodId string
		var networkTokenId string

		resp, httpRes, err := apiClient.TokensAPI.SuspendNetworkToken(context.Background(), paymentMethodId, networkTokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
