/*
Gr4vy API

Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.

API version: 1.1.0-beta
Contact: code@gr4vy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApplePaySessionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplePaySessionRequest{}

// ApplePaySessionRequest Initiates a new session with Apple Pay.
type ApplePaySessionRequest struct {
	// Validation URL obtained from the event passed to a `onvalidatemerchant` callback.
	ValidationUrl string `json:"validation_url"`
	// Fully qualified domain name of the merchant.
	DomainName string `json:"domain_name"`
}

type _ApplePaySessionRequest ApplePaySessionRequest

// NewApplePaySessionRequest instantiates a new ApplePaySessionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplePaySessionRequest(validationUrl string, domainName string) *ApplePaySessionRequest {
	this := ApplePaySessionRequest{}
	this.ValidationUrl = validationUrl
	this.DomainName = domainName
	return &this
}

// NewApplePaySessionRequestWithDefaults instantiates a new ApplePaySessionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplePaySessionRequestWithDefaults() *ApplePaySessionRequest {
	this := ApplePaySessionRequest{}
	return &this
}

// GetValidationUrl returns the ValidationUrl field value
func (o *ApplePaySessionRequest) GetValidationUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidationUrl
}

// GetValidationUrlOk returns a tuple with the ValidationUrl field value
// and a boolean to check if the value has been set.
func (o *ApplePaySessionRequest) GetValidationUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidationUrl, true
}

// SetValidationUrl sets field value
func (o *ApplePaySessionRequest) SetValidationUrl(v string) {
	o.ValidationUrl = v
}

// GetDomainName returns the DomainName field value
func (o *ApplePaySessionRequest) GetDomainName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value
// and a boolean to check if the value has been set.
func (o *ApplePaySessionRequest) GetDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainName, true
}

// SetDomainName sets field value
func (o *ApplePaySessionRequest) SetDomainName(v string) {
	o.DomainName = v
}

func (o ApplePaySessionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplePaySessionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["validation_url"] = o.ValidationUrl
	toSerialize["domain_name"] = o.DomainName
	return toSerialize, nil
}

func (o *ApplePaySessionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"validation_url",
		"domain_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplePaySessionRequest := _ApplePaySessionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplePaySessionRequest)

	if err != nil {
		return err
	}

	*o = ApplePaySessionRequest(varApplePaySessionRequest)

	return err
}

type NullableApplePaySessionRequest struct {
	value *ApplePaySessionRequest
	isSet bool
}

func (v NullableApplePaySessionRequest) Get() *ApplePaySessionRequest {
	return v.value
}

func (v *NullableApplePaySessionRequest) Set(val *ApplePaySessionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApplePaySessionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApplePaySessionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplePaySessionRequest(val *ApplePaySessionRequest) *NullableApplePaySessionRequest {
	return &NullableApplePaySessionRequest{value: val, isSet: true}
}

func (v NullableApplePaySessionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplePaySessionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


