/*
Gr4vy API

Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.

API version: 1.1.0-beta
Contact: code@gr4vy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// VaultForwardAPIService VaultForwardAPI service
type VaultForwardAPIService service

type ApiMakeVaultForwardRequest struct {
	ctx context.Context
	ApiService *VaultForwardAPIService
	xVaultForwardPaymentMethods *string
	xVaultForwardUrl *string
	xVaultForwardHttpMethod *string
	xVaultForwardAuthentications *string
	xVaultForwardHeaderHEADERNAME *string
	xVaultForwardTimeout *int32
	body *string
}

// A comma-separated list of Payment Method IDs that can be used to fill in the request template. At least 1 must be given, and a maximum of 100 are accepted.
func (r ApiMakeVaultForwardRequest) XVaultForwardPaymentMethods(xVaultForwardPaymentMethods string) ApiMakeVaultForwardRequest {
	r.xVaultForwardPaymentMethods = &xVaultForwardPaymentMethods
	return r
}

// The URL to forward card data to.
func (r ApiMakeVaultForwardRequest) XVaultForwardUrl(xVaultForwardUrl string) ApiMakeVaultForwardRequest {
	r.xVaultForwardUrl = &xVaultForwardUrl
	return r
}

// The HTTP method that is used when forwarding the request to the &#x60;x-vault-forward-url&#x60;.
func (r ApiMakeVaultForwardRequest) XVaultForwardHttpMethod(xVaultForwardHttpMethod string) ApiMakeVaultForwardRequest {
	r.xVaultForwardHttpMethod = &xVaultForwardHttpMethod
	return r
}

// A comma-separated list of IDs for the authentication methods that will be applied to a Vault Forward request.
func (r ApiMakeVaultForwardRequest) XVaultForwardAuthentications(xVaultForwardAuthentications string) ApiMakeVaultForwardRequest {
	r.xVaultForwardAuthentications = &xVaultForwardAuthentications
	return r
}

// A header that is forwarded to the &#x60;x-vault-forward-url&#x60;. The header will be forwarded without the &#x60;x-vault-forward-header&#x60; part. For example, &#x60;x-vault-forward-header-x-frame-options: SAMEORIGIN&#x60; is forwarded as &#x60;x-frame-options: SAMEORIGIN&#x60;.
func (r ApiMakeVaultForwardRequest) XVaultForwardHeaderHEADERNAME(xVaultForwardHeaderHEADERNAME string) ApiMakeVaultForwardRequest {
	r.xVaultForwardHeaderHEADERNAME = &xVaultForwardHeaderHEADERNAME
	return r
}

// The number of seconds to wait before timing out when forwarding the request.
func (r ApiMakeVaultForwardRequest) XVaultForwardTimeout(xVaultForwardTimeout int32) ApiMakeVaultForwardRequest {
	r.xVaultForwardTimeout = &xVaultForwardTimeout
	return r
}

// Payload to forward in the request.
func (r ApiMakeVaultForwardRequest) Body(body string) ApiMakeVaultForwardRequest {
	r.body = &body
	return r
}

func (r ApiMakeVaultForwardRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.MakeVaultForwardExecute(r)
}

/*
MakeVaultForward Forward PCI data

Forward an API call to a PCI endpoint. The request body is evaluated and any template fields are replaced by the card data before the request is sent to the given destination.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMakeVaultForwardRequest
*/
func (a *VaultForwardAPIService) MakeVaultForward(ctx context.Context) ApiMakeVaultForwardRequest {
	return ApiMakeVaultForwardRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *VaultForwardAPIService) MakeVaultForwardExecute(r ApiMakeVaultForwardRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VaultForwardAPIService.MakeVaultForward")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/vault-forward"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xVaultForwardPaymentMethods == nil {
		return localVarReturnValue, nil, reportError("xVaultForwardPaymentMethods is required and must be specified")
	}
	if r.xVaultForwardUrl == nil {
		return localVarReturnValue, nil, reportError("xVaultForwardUrl is required and must be specified")
	}
	if r.xVaultForwardHttpMethod == nil {
		return localVarReturnValue, nil, reportError("xVaultForwardHttpMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-vault-forward-payment-methods", r.xVaultForwardPaymentMethods, "simple", "")
	if r.xVaultForwardAuthentications != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-vault-forward-authentications", r.xVaultForwardAuthentications, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-vault-forward-url", r.xVaultForwardUrl, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-vault-forward-http-method", r.xVaultForwardHttpMethod, "simple", "")
	if r.xVaultForwardHeaderHEADERNAME != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-vault-forward-header-{HEADER_NAME}", r.xVaultForwardHeaderHEADERNAME, "simple", "")
	}
	if r.xVaultForwardTimeout != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-vault-forward-timeout", r.xVaultForwardTimeout, "simple", "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error400BadRequest
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error401Unauthorized
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
