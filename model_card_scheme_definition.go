/*
Gr4vy API

Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.

API version: 1.1.0-beta
Contact: code@gr4vy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CardSchemeDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardSchemeDefinition{}

// CardSchemeDefinition Definitions of a card scheme including icon, label, etc.
type CardSchemeDefinition struct {
	// `card-scheme-definition`.
	Type *string `json:"type,omitempty"`
	// The name of this card scheme.
	Id *string `json:"id,omitempty"`
	// The icon for this card scheme.
	IconUrl *string `json:"icon_url,omitempty"`
	// The display name of this card scheme.
	DisplayName *string `json:"display_name,omitempty"`
}

// NewCardSchemeDefinition instantiates a new CardSchemeDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardSchemeDefinition() *CardSchemeDefinition {
	this := CardSchemeDefinition{}
	return &this
}

// NewCardSchemeDefinitionWithDefaults instantiates a new CardSchemeDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardSchemeDefinitionWithDefaults() *CardSchemeDefinition {
	this := CardSchemeDefinition{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CardSchemeDefinition) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardSchemeDefinition) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CardSchemeDefinition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CardSchemeDefinition) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CardSchemeDefinition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardSchemeDefinition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CardSchemeDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CardSchemeDefinition) SetId(v string) {
	o.Id = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *CardSchemeDefinition) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardSchemeDefinition) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *CardSchemeDefinition) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *CardSchemeDefinition) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CardSchemeDefinition) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardSchemeDefinition) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CardSchemeDefinition) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CardSchemeDefinition) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o CardSchemeDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardSchemeDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IconUrl) {
		toSerialize["icon_url"] = o.IconUrl
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	return toSerialize, nil
}

type NullableCardSchemeDefinition struct {
	value *CardSchemeDefinition
	isSet bool
}

func (v NullableCardSchemeDefinition) Get() *CardSchemeDefinition {
	return v.value
}

func (v *NullableCardSchemeDefinition) Set(val *CardSchemeDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableCardSchemeDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableCardSchemeDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardSchemeDefinition(val *CardSchemeDefinition) *NullableCardSchemeDefinition {
	return &NullableCardSchemeDefinition{value: val, isSet: true}
}

func (v NullableCardSchemeDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardSchemeDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


