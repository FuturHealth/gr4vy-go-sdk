/*
Gr4vy API

Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.

API version: 1.1.0-beta
Contact: code@gr4vy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the GiftCardService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GiftCardService{}

// GiftCardService An configured gift card service.
type GiftCardService struct {
	// The type of this resource.
	Type *string `json:"type,omitempty"`
	// The ID of this gift card service.
	Id *string `json:"id,omitempty"`
	// The unique ID for a merchant account.
	MerchantAccountId *string `json:"merchant_account_id,omitempty"`
	// The ID of the gift card service definition used to create this service. 
	GiftCardServiceDefinitionId *string `json:"gift_card_service_definition_id,omitempty"`
	// The custom name set for this service.
	DisplayName *string `json:"display_name,omitempty"`
	// Defines if this service is currently active or not.
	Active *bool `json:"active,omitempty"`
	// A list of fields, each containing a key-value pair for each field configured for this gift card service. Fields marked as `secret` are not returned.
	Fields []GiftCardServiceFieldsInner `json:"fields,omitempty"`
	// The date and time when this service was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when this service was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewGiftCardService instantiates a new GiftCardService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGiftCardService() *GiftCardService {
	this := GiftCardService{}
	return &this
}

// NewGiftCardServiceWithDefaults instantiates a new GiftCardService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGiftCardServiceWithDefaults() *GiftCardService {
	this := GiftCardService{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GiftCardService) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardService) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GiftCardService) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GiftCardService) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GiftCardService) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardService) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GiftCardService) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GiftCardService) SetId(v string) {
	o.Id = &v
}

// GetMerchantAccountId returns the MerchantAccountId field value if set, zero value otherwise.
func (o *GiftCardService) GetMerchantAccountId() string {
	if o == nil || IsNil(o.MerchantAccountId) {
		var ret string
		return ret
	}
	return *o.MerchantAccountId
}

// GetMerchantAccountIdOk returns a tuple with the MerchantAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardService) GetMerchantAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantAccountId) {
		return nil, false
	}
	return o.MerchantAccountId, true
}

// HasMerchantAccountId returns a boolean if a field has been set.
func (o *GiftCardService) HasMerchantAccountId() bool {
	if o != nil && !IsNil(o.MerchantAccountId) {
		return true
	}

	return false
}

// SetMerchantAccountId gets a reference to the given string and assigns it to the MerchantAccountId field.
func (o *GiftCardService) SetMerchantAccountId(v string) {
	o.MerchantAccountId = &v
}

// GetGiftCardServiceDefinitionId returns the GiftCardServiceDefinitionId field value if set, zero value otherwise.
func (o *GiftCardService) GetGiftCardServiceDefinitionId() string {
	if o == nil || IsNil(o.GiftCardServiceDefinitionId) {
		var ret string
		return ret
	}
	return *o.GiftCardServiceDefinitionId
}

// GetGiftCardServiceDefinitionIdOk returns a tuple with the GiftCardServiceDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardService) GetGiftCardServiceDefinitionIdOk() (*string, bool) {
	if o == nil || IsNil(o.GiftCardServiceDefinitionId) {
		return nil, false
	}
	return o.GiftCardServiceDefinitionId, true
}

// HasGiftCardServiceDefinitionId returns a boolean if a field has been set.
func (o *GiftCardService) HasGiftCardServiceDefinitionId() bool {
	if o != nil && !IsNil(o.GiftCardServiceDefinitionId) {
		return true
	}

	return false
}

// SetGiftCardServiceDefinitionId gets a reference to the given string and assigns it to the GiftCardServiceDefinitionId field.
func (o *GiftCardService) SetGiftCardServiceDefinitionId(v string) {
	o.GiftCardServiceDefinitionId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *GiftCardService) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardService) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *GiftCardService) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *GiftCardService) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *GiftCardService) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardService) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *GiftCardService) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *GiftCardService) SetActive(v bool) {
	o.Active = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *GiftCardService) GetFields() []GiftCardServiceFieldsInner {
	if o == nil || IsNil(o.Fields) {
		var ret []GiftCardServiceFieldsInner
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardService) GetFieldsOk() ([]GiftCardServiceFieldsInner, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *GiftCardService) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []GiftCardServiceFieldsInner and assigns it to the Fields field.
func (o *GiftCardService) SetFields(v []GiftCardServiceFieldsInner) {
	o.Fields = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GiftCardService) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardService) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GiftCardService) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *GiftCardService) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *GiftCardService) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardService) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GiftCardService) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *GiftCardService) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o GiftCardService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GiftCardService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MerchantAccountId) {
		toSerialize["merchant_account_id"] = o.MerchantAccountId
	}
	if !IsNil(o.GiftCardServiceDefinitionId) {
		toSerialize["gift_card_service_definition_id"] = o.GiftCardServiceDefinitionId
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableGiftCardService struct {
	value *GiftCardService
	isSet bool
}

func (v NullableGiftCardService) Get() *GiftCardService {
	return v.value
}

func (v *NullableGiftCardService) Set(val *GiftCardService) {
	v.value = val
	v.isSet = true
}

func (v NullableGiftCardService) IsSet() bool {
	return v.isSet
}

func (v *NullableGiftCardService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGiftCardService(val *GiftCardService) *NullableGiftCardService {
	return &NullableGiftCardService{value: val, isSet: true}
}

func (v NullableGiftCardService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGiftCardService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


