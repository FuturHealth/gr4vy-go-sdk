/*
Gr4vy API

Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.

API version: 1.1.0-beta
Contact: code@gr4vy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionGiftCardNewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionGiftCardNewRequest{}

// TransactionGiftCardNewRequest Create a transaction with this gift card.
type TransactionGiftCardNewRequest struct {
	// The 16-19 digit number for this gift card.
	Number string `json:"number" validate:"regexp=^[0-9]{16,19}$"`
	// The PIN for this gift card.
	Pin string `json:"pin"`
	// The monetary amount to charge for this gift card, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`.  All gift card amounts are subtracted from the total transaction amount. The remainder is charged to the provided `payment_method`.
	Amount int32 `json:"amount"`
}

type _TransactionGiftCardNewRequest TransactionGiftCardNewRequest

// NewTransactionGiftCardNewRequest instantiates a new TransactionGiftCardNewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionGiftCardNewRequest(number string, pin string, amount int32) *TransactionGiftCardNewRequest {
	this := TransactionGiftCardNewRequest{}
	this.Number = number
	this.Pin = pin
	this.Amount = amount
	return &this
}

// NewTransactionGiftCardNewRequestWithDefaults instantiates a new TransactionGiftCardNewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionGiftCardNewRequestWithDefaults() *TransactionGiftCardNewRequest {
	this := TransactionGiftCardNewRequest{}
	return &this
}

// GetNumber returns the Number field value
func (o *TransactionGiftCardNewRequest) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *TransactionGiftCardNewRequest) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *TransactionGiftCardNewRequest) SetNumber(v string) {
	o.Number = v
}

// GetPin returns the Pin field value
func (o *TransactionGiftCardNewRequest) GetPin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pin
}

// GetPinOk returns a tuple with the Pin field value
// and a boolean to check if the value has been set.
func (o *TransactionGiftCardNewRequest) GetPinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pin, true
}

// SetPin sets field value
func (o *TransactionGiftCardNewRequest) SetPin(v string) {
	o.Pin = v
}

// GetAmount returns the Amount field value
func (o *TransactionGiftCardNewRequest) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionGiftCardNewRequest) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionGiftCardNewRequest) SetAmount(v int32) {
	o.Amount = v
}

func (o TransactionGiftCardNewRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionGiftCardNewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["number"] = o.Number
	toSerialize["pin"] = o.Pin
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *TransactionGiftCardNewRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"number",
		"pin",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionGiftCardNewRequest := _TransactionGiftCardNewRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionGiftCardNewRequest)

	if err != nil {
		return err
	}

	*o = TransactionGiftCardNewRequest(varTransactionGiftCardNewRequest)

	return err
}

type NullableTransactionGiftCardNewRequest struct {
	value *TransactionGiftCardNewRequest
	isSet bool
}

func (v NullableTransactionGiftCardNewRequest) Get() *TransactionGiftCardNewRequest {
	return v.value
}

func (v *NullableTransactionGiftCardNewRequest) Set(val *TransactionGiftCardNewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionGiftCardNewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionGiftCardNewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionGiftCardNewRequest(val *TransactionGiftCardNewRequest) *NullableTransactionGiftCardNewRequest {
	return &NullableTransactionGiftCardNewRequest{value: val, isSet: true}
}

func (v NullableTransactionGiftCardNewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionGiftCardNewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


