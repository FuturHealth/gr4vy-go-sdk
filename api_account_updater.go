/*
Gr4vy API

Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.

API version: 1.1.0-beta
Contact: code@gr4vy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AccountUpdaterAPIService AccountUpdaterAPI service
type AccountUpdaterAPIService service

type ApiNewAccountUpdaterJobRequest struct {
	ctx context.Context
	ApiService *AccountUpdaterAPIService
	accountUpdaterJobCreate *AccountUpdaterJobCreate
}

func (r ApiNewAccountUpdaterJobRequest) AccountUpdaterJobCreate(accountUpdaterJobCreate AccountUpdaterJobCreate) ApiNewAccountUpdaterJobRequest {
	r.accountUpdaterJobCreate = &accountUpdaterJobCreate
	return r
}

func (r ApiNewAccountUpdaterJobRequest) Execute() (*AccountUpdaterJob, *http.Response, error) {
	return r.ApiService.NewAccountUpdaterJobExecute(r)
}

/*
NewAccountUpdaterJob Create Account Updater job

Creates an Account Updater job.

A request is submitted to a third-party service, containing inquiries for a given
set of payment methods. The job is not processed right away, but once created, it
will store new card details automatically, if there are, when results are ready.

A payment method is considered for the job if the following conditions are met:
* It exists.
* It's in a valid state: `status` is either `succeeded` or `processing`.
* It corresponds to a card: `method` is `card`.
* Its scheme is supported: `scheme` is `amex`, `discover`, `mastercard` or `visa`.
* It doesn't have an in-progress inquiry already.

The endpoint works in a best-efforts basis and it doesn't return any error when a payment
method doesn't qualify for an inquiry. To determine what payment methods were considered
for the job, an `inquiries` field, returned in the response body, contains the submitted
inquiries. If none of the payment methods qualified for an inquiry, the job is not created
and a `204 No Content` status code is returned.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiNewAccountUpdaterJobRequest
*/
func (a *AccountUpdaterAPIService) NewAccountUpdaterJob(ctx context.Context) ApiNewAccountUpdaterJobRequest {
	return ApiNewAccountUpdaterJobRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountUpdaterJob
func (a *AccountUpdaterAPIService) NewAccountUpdaterJobExecute(r ApiNewAccountUpdaterJobRequest) (*AccountUpdaterJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountUpdaterJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountUpdaterAPIService.NewAccountUpdaterJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account-updater/jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountUpdaterJobCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error400BadRequest
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error401Unauthorized
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
