/*
Gr4vy API

Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.

API version: 1.1.0-beta
Contact: code@gr4vy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CardSchemeDefinitions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardSchemeDefinitions{}

// CardSchemeDefinitions A list of available card scheme definitions.
type CardSchemeDefinitions struct {
	Items []CardSchemeDefinition `json:"items,omitempty"`
}

// NewCardSchemeDefinitions instantiates a new CardSchemeDefinitions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardSchemeDefinitions() *CardSchemeDefinitions {
	this := CardSchemeDefinitions{}
	return &this
}

// NewCardSchemeDefinitionsWithDefaults instantiates a new CardSchemeDefinitions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardSchemeDefinitionsWithDefaults() *CardSchemeDefinitions {
	this := CardSchemeDefinitions{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *CardSchemeDefinitions) GetItems() []CardSchemeDefinition {
	if o == nil || IsNil(o.Items) {
		var ret []CardSchemeDefinition
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardSchemeDefinitions) GetItemsOk() ([]CardSchemeDefinition, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *CardSchemeDefinitions) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []CardSchemeDefinition and assigns it to the Items field.
func (o *CardSchemeDefinitions) SetItems(v []CardSchemeDefinition) {
	o.Items = v
}

func (o CardSchemeDefinitions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardSchemeDefinitions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableCardSchemeDefinitions struct {
	value *CardSchemeDefinitions
	isSet bool
}

func (v NullableCardSchemeDefinitions) Get() *CardSchemeDefinitions {
	return v.value
}

func (v *NullableCardSchemeDefinitions) Set(val *CardSchemeDefinitions) {
	v.value = val
	v.isSet = true
}

func (v NullableCardSchemeDefinitions) IsSet() bool {
	return v.isSet
}

func (v *NullableCardSchemeDefinitions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardSchemeDefinitions(val *CardSchemeDefinitions) *NullableCardSchemeDefinitions {
	return &NullableCardSchemeDefinitions{value: val, isSet: true}
}

func (v NullableCardSchemeDefinitions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardSchemeDefinitions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


