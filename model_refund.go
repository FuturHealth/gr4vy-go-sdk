/*
Gr4vy API

Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.

API version: 1.1.0-beta
Contact: code@gr4vy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Refund type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Refund{}

// Refund A refund record.  A refund is always associated with a single transaction, while a transaction can potentially have several refunds.
type Refund struct {
	// The type of this resource. Is always `refund`.
	Type *string `json:"type,omitempty"`
	// The unique ID of the refund.
	Id *string `json:"id,omitempty"`
	// The ID of the transaction associated with this refund.
	TransactionId *string `json:"transaction_id,omitempty"`
	// The payment service's unique ID for the refund.
	PaymentServiceRefundId *string `json:"payment_service_refund_id,omitempty"`
	// The status of the refund. It may change over time as asynchronous processing events occur.  - `processing` - The refund is being processed. - `succeeded` - The refund was successful. - `declined` - The refund was declined by the underlying PSP. - `failed` - The refund could not proceed due to a technical issue. - `voided` - The refund was voided and will not proceed.
	Status *string `json:"status,omitempty"`
	// The currency code for this refund. Will always match that of the associated transaction.
	Currency *string `json:"currency,omitempty"`
	// The amount requested for this refund.
	Amount *int32 `json:"amount,omitempty"`
	// The reason for this refund. Could be a multiline string.
	Reason NullableString `json:"reason,omitempty"`
	// The date and time when this refund was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when this refund was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The type of the instrument that was refunded.
	TargetType *string `json:"target_type,omitempty"`
	// The optional ID of the instrument that was refunded. This may be `null` if the instrument was not stored.
	TargetId NullableString `json:"target_id,omitempty"`
	// An external identifier that can be used to match the refund against your own records.
	ExternalIdentifier NullableString `json:"external_identifier,omitempty"`
	// The base62 encoded refund ID. This represents a shorter version of this refund's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's refund against our system.
	ReconciliationId *string `json:"reconciliation_id,omitempty"`
	// The external identifier of the related transaction.
	TransactionExternalIdentifier NullableString `json:"transaction_external_identifier,omitempty"`
	// The base62 encoded transaction ID. This represents a shorter version of the related transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system.
	TransactionReconciliationId *string `json:"transaction_reconciliation_id,omitempty"`
}

// NewRefund instantiates a new Refund object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefund() *Refund {
	this := Refund{}
	return &this
}

// NewRefundWithDefaults instantiates a new Refund object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundWithDefaults() *Refund {
	this := Refund{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Refund) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Refund) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Refund) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Refund) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Refund) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Refund) SetId(v string) {
	o.Id = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *Refund) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *Refund) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *Refund) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetPaymentServiceRefundId returns the PaymentServiceRefundId field value if set, zero value otherwise.
func (o *Refund) GetPaymentServiceRefundId() string {
	if o == nil || IsNil(o.PaymentServiceRefundId) {
		var ret string
		return ret
	}
	return *o.PaymentServiceRefundId
}

// GetPaymentServiceRefundIdOk returns a tuple with the PaymentServiceRefundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetPaymentServiceRefundIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentServiceRefundId) {
		return nil, false
	}
	return o.PaymentServiceRefundId, true
}

// HasPaymentServiceRefundId returns a boolean if a field has been set.
func (o *Refund) HasPaymentServiceRefundId() bool {
	if o != nil && !IsNil(o.PaymentServiceRefundId) {
		return true
	}

	return false
}

// SetPaymentServiceRefundId gets a reference to the given string and assigns it to the PaymentServiceRefundId field.
func (o *Refund) SetPaymentServiceRefundId(v string) {
	o.PaymentServiceRefundId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Refund) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Refund) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Refund) SetStatus(v string) {
	o.Status = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Refund) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Refund) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Refund) SetCurrency(v string) {
	o.Currency = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Refund) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Refund) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *Refund) SetAmount(v int32) {
	o.Amount = &v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Refund) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Refund) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *Refund) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *Refund) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *Refund) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *Refund) UnsetReason() {
	o.Reason.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Refund) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Refund) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Refund) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Refund) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Refund) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Refund) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetTargetType returns the TargetType field value if set, zero value otherwise.
func (o *Refund) GetTargetType() string {
	if o == nil || IsNil(o.TargetType) {
		var ret string
		return ret
	}
	return *o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetTargetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetType) {
		return nil, false
	}
	return o.TargetType, true
}

// HasTargetType returns a boolean if a field has been set.
func (o *Refund) HasTargetType() bool {
	if o != nil && !IsNil(o.TargetType) {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given string and assigns it to the TargetType field.
func (o *Refund) SetTargetType(v string) {
	o.TargetType = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Refund) GetTargetId() string {
	if o == nil || IsNil(o.TargetId.Get()) {
		var ret string
		return ret
	}
	return *o.TargetId.Get()
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Refund) GetTargetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetId.Get(), o.TargetId.IsSet()
}

// HasTargetId returns a boolean if a field has been set.
func (o *Refund) HasTargetId() bool {
	if o != nil && o.TargetId.IsSet() {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given NullableString and assigns it to the TargetId field.
func (o *Refund) SetTargetId(v string) {
	o.TargetId.Set(&v)
}
// SetTargetIdNil sets the value for TargetId to be an explicit nil
func (o *Refund) SetTargetIdNil() {
	o.TargetId.Set(nil)
}

// UnsetTargetId ensures that no value is present for TargetId, not even an explicit nil
func (o *Refund) UnsetTargetId() {
	o.TargetId.Unset()
}

// GetExternalIdentifier returns the ExternalIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Refund) GetExternalIdentifier() string {
	if o == nil || IsNil(o.ExternalIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.ExternalIdentifier.Get()
}

// GetExternalIdentifierOk returns a tuple with the ExternalIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Refund) GetExternalIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalIdentifier.Get(), o.ExternalIdentifier.IsSet()
}

// HasExternalIdentifier returns a boolean if a field has been set.
func (o *Refund) HasExternalIdentifier() bool {
	if o != nil && o.ExternalIdentifier.IsSet() {
		return true
	}

	return false
}

// SetExternalIdentifier gets a reference to the given NullableString and assigns it to the ExternalIdentifier field.
func (o *Refund) SetExternalIdentifier(v string) {
	o.ExternalIdentifier.Set(&v)
}
// SetExternalIdentifierNil sets the value for ExternalIdentifier to be an explicit nil
func (o *Refund) SetExternalIdentifierNil() {
	o.ExternalIdentifier.Set(nil)
}

// UnsetExternalIdentifier ensures that no value is present for ExternalIdentifier, not even an explicit nil
func (o *Refund) UnsetExternalIdentifier() {
	o.ExternalIdentifier.Unset()
}

// GetReconciliationId returns the ReconciliationId field value if set, zero value otherwise.
func (o *Refund) GetReconciliationId() string {
	if o == nil || IsNil(o.ReconciliationId) {
		var ret string
		return ret
	}
	return *o.ReconciliationId
}

// GetReconciliationIdOk returns a tuple with the ReconciliationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetReconciliationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReconciliationId) {
		return nil, false
	}
	return o.ReconciliationId, true
}

// HasReconciliationId returns a boolean if a field has been set.
func (o *Refund) HasReconciliationId() bool {
	if o != nil && !IsNil(o.ReconciliationId) {
		return true
	}

	return false
}

// SetReconciliationId gets a reference to the given string and assigns it to the ReconciliationId field.
func (o *Refund) SetReconciliationId(v string) {
	o.ReconciliationId = &v
}

// GetTransactionExternalIdentifier returns the TransactionExternalIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Refund) GetTransactionExternalIdentifier() string {
	if o == nil || IsNil(o.TransactionExternalIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.TransactionExternalIdentifier.Get()
}

// GetTransactionExternalIdentifierOk returns a tuple with the TransactionExternalIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Refund) GetTransactionExternalIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionExternalIdentifier.Get(), o.TransactionExternalIdentifier.IsSet()
}

// HasTransactionExternalIdentifier returns a boolean if a field has been set.
func (o *Refund) HasTransactionExternalIdentifier() bool {
	if o != nil && o.TransactionExternalIdentifier.IsSet() {
		return true
	}

	return false
}

// SetTransactionExternalIdentifier gets a reference to the given NullableString and assigns it to the TransactionExternalIdentifier field.
func (o *Refund) SetTransactionExternalIdentifier(v string) {
	o.TransactionExternalIdentifier.Set(&v)
}
// SetTransactionExternalIdentifierNil sets the value for TransactionExternalIdentifier to be an explicit nil
func (o *Refund) SetTransactionExternalIdentifierNil() {
	o.TransactionExternalIdentifier.Set(nil)
}

// UnsetTransactionExternalIdentifier ensures that no value is present for TransactionExternalIdentifier, not even an explicit nil
func (o *Refund) UnsetTransactionExternalIdentifier() {
	o.TransactionExternalIdentifier.Unset()
}

// GetTransactionReconciliationId returns the TransactionReconciliationId field value if set, zero value otherwise.
func (o *Refund) GetTransactionReconciliationId() string {
	if o == nil || IsNil(o.TransactionReconciliationId) {
		var ret string
		return ret
	}
	return *o.TransactionReconciliationId
}

// GetTransactionReconciliationIdOk returns a tuple with the TransactionReconciliationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetTransactionReconciliationIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionReconciliationId) {
		return nil, false
	}
	return o.TransactionReconciliationId, true
}

// HasTransactionReconciliationId returns a boolean if a field has been set.
func (o *Refund) HasTransactionReconciliationId() bool {
	if o != nil && !IsNil(o.TransactionReconciliationId) {
		return true
	}

	return false
}

// SetTransactionReconciliationId gets a reference to the given string and assigns it to the TransactionReconciliationId field.
func (o *Refund) SetTransactionReconciliationId(v string) {
	o.TransactionReconciliationId = &v
}

func (o Refund) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Refund) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if !IsNil(o.PaymentServiceRefundId) {
		toSerialize["payment_service_refund_id"] = o.PaymentServiceRefundId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.TargetType) {
		toSerialize["target_type"] = o.TargetType
	}
	if o.TargetId.IsSet() {
		toSerialize["target_id"] = o.TargetId.Get()
	}
	if o.ExternalIdentifier.IsSet() {
		toSerialize["external_identifier"] = o.ExternalIdentifier.Get()
	}
	if !IsNil(o.ReconciliationId) {
		toSerialize["reconciliation_id"] = o.ReconciliationId
	}
	if o.TransactionExternalIdentifier.IsSet() {
		toSerialize["transaction_external_identifier"] = o.TransactionExternalIdentifier.Get()
	}
	if !IsNil(o.TransactionReconciliationId) {
		toSerialize["transaction_reconciliation_id"] = o.TransactionReconciliationId
	}
	return toSerialize, nil
}

type NullableRefund struct {
	value *Refund
	isSet bool
}

func (v NullableRefund) Get() *Refund {
	return v.value
}

func (v *NullableRefund) Set(val *Refund) {
	v.value = val
	v.isSet = true
}

func (v NullableRefund) IsSet() bool {
	return v.isSet
}

func (v *NullableRefund) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefund(val *Refund) *NullableRefund {
	return &NullableRefund{value: val, isSet: true}
}

func (v NullableRefund) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefund) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


